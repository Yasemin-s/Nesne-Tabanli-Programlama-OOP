ğŸ‘‹ 1 - Record Nedir? OOP deki Yeri Neresidir?

RecordÄ± anlayabilmek iÃ§in Ã¶n hazÄ±rlÄ±k - Ä°nit Only Properties : 

 âœ¨ Ä°nit Only Properties âœ¨

C# 9.0 da, herhangi bir nesnenin propertylerine ilk deÄŸerlerinin verilmesi ve sonraki sÃ¼reÃ§te bu deÄŸerlerin deÄŸiÅŸtirilmemesini garanti altÄ±na almamÄ±zÄ± saÄŸlayan init only properties Ã¶zelliÄŸi gelmiÅŸtir. Yani herhangi bir propertyi read only haline getirir. Bu Ã¶zellik sayesinde nesnenin sadece ilk yaratÄ±lÄ±ÅŸ anÄ±nda propertylerine deÄŸer atanmakta ve bÃ¶ylece iÅŸ kurallarÄ± gereÄŸi runtime da deÄŸeri deÄŸiÅŸmemesi gereken nesneler iÃ§in ideal bir Ã¶nlem alÄ±nmaktadÄ±r. 

ğŸ‘‰ ! Nesnenin ilk yaratÄ±lÄ±ÅŸ anÄ±na object initializer denir. Object initializer anÄ±nda read only bir propertye deÄŸer atayamazsÄ±n. Atayabilmek istiyorsan init only property kullanmak gerekir. Ä°nit only properties, object initializer dediÄŸimiz nesnenin ilk yaratÄ±lÄ±ÅŸ anÄ±nda deÄŸer atamayÄ± ve sadece okunur yapmayÄ± saÄŸlar. 

foto1- Propertyin get set kÄ±sÄ±mlarÄ±ndan seti kaldÄ±rÄ±rsan sadece okunur hale getirirsin ve sadece okunur hale getirdiÄŸin iÃ§in ilk deÄŸeri atayamazsÄ±n. Ä°ÅŸte bu sÄ±kÄ±ntÄ±dan doalyÄ± set kalkmÄ±ÅŸ olsa bile ilk deÄŸerini = 3 ÅŸeklinde verebiliyorsun. 

ğŸ‘‰ ! Ä°nit only properties, developer aÃ§Ä±sÄ±ndan sÃ¼reÃ§ esnasÄ±nda deÄŸiÅŸtirilmemesi gereken property deÄŸerlerinin - yanlÄ±ÅŸlÄ±kla - deÄŸiÅŸtirilmesinin Ã¶nÃ¼ne geÃ§mekte ve bÃ¶ylece olasÄ± hata ve buglardan yazÄ±lÄ±m arÄ±ndÄ±rmaktadÄ±r. 

ğŸ‘‹ 2 - Ä°nit Only Properties ve Getter Only Properties ArasÄ±nda NasÄ±l Bir Fark Var ? 

Readonly bir propertye deÄŸer atamaya Ã§alÄ±ÅŸtÄ±ÄŸÄ±mÄ±zda hata verir. Foto2 - init only properties ise readonly bir propertye deÄŸer vermeyi saÄŸlar. 

ğŸ‘‹ 3 - Ä°nit Only Propertis NasÄ±l TanÄ±mlanÄ±r ? 

Foto3 - Ä°nit only properties Ã¶zelliÄŸini kullanabilmek iÃ§in init keywordÃ¼nÃ¼ kullanmak yeterlidir. Ä°nit ile, property sadece okunabilir ve object initializer olduÄŸunda deÄŸer atamasÄ± gerÃ§ekleÅŸtirilebilir. AyrÄ±ca init, get keywordÃ¼ olmadan kullanÄ±lmaz ve gereÄŸi yapÄ±sÄ± bu semantikte set bloÄŸu kullanÄ±lmaz. 

public string Name { get; init; } = "yase"; bu ÅŸekilde direkt deÄŸer atamanÄ±n adÄ±, auto propert initializerdÄ±r ve get init konseptinde ilk deÄŸerini constructordan da alabilir. 

Readonly fieldlarda init only property kullanÄ±mÄ± kritik: Ä°nit bir yandan set gÃ¶revi gÃ¶rÃ¼r. Readonly property de deÄŸer atamak istiyorsak init kullanabiliriz. Foto4 

ğŸ‘‹ 4 - Record Nedir ? 

Record bir nesne hatta class, classÄ±n kendisidir. 
C# 9.0 ile gelen init only properties Ã¶zelliÄŸi, nesne Ã¼retim esnasÄ± dÄ±ÅŸÄ±nda deÄŸiÅŸmez deÄŸerler oluÅŸturulmasÄ± iÃ§in constructor ve auto property initializer yapÄ±sÄ±nÄ±n yanÄ±nda object initializer yapÄ±sÄ±nÄ±n kullanÄ±labilir olmasÄ±nÄ± saÄŸlÄ±yordu.  

Ftot5 - EÄŸer ki bir propertyde sabitlik/deÄŸiÅŸmemezlik/salt okunurluk/readonly/sadece okunabilirlik amaÃ§ ediniliyorsa init-only properties Ã¶zelliÄŸi kullanÄ±labilir. Ama eÄŸer ki object bÃ¼tÃ¼nsel olarak deÄŸiÅŸmez olsun istiyorsan bu durumda init yetersiz kalacaktÄ±r. Ä°htiyacÄ±mÄ±z olan intten fazlasÄ±dÄ±r. Ä°ÅŸte bu ihtiyaÃ§tan dolayÄ± record tÃ¼rÃ¼ geliÅŸtirilmiÅŸtir. 

ğŸ‘‰ ! Record, bir propertyin deÄŸiÅŸmezliÄŸinden ziyade nesnenin genel olarak deÄŸerinin deÄŸiÅŸmemesine odaklanÄ±r. Record, bir objenin sabit/deÄŸiÅŸmez olarak kalmasÄ±nÄ± saÄŸlamakta ve bu durumu gÃ¼vence altÄ±na almaktadÄ±r. BÃ¶ylece bu obje, artÄ±k deÄŸeri deÄŸiÅŸmeyeceÄŸinden dolayÄ± esasÄ±nda objectten ziyade deÄŸer gÃ¶zÃ¼yle bakÄ±lan bir yapÄ±ya dÃ¶nÃ¼ÅŸecektir. 

ğŸ‘‰ ! Nesne Ã¶n planda ise bu class, nesnenin deÄŸerleri Ã¶n plandaysa bu recorddÄ±r. Buradan yola Ã§Ä±karak recordlarÄ±, iÃ§erisinde data barÄ±ndÄ±ran  lightweight(hafif) classlar olarak deÄŸerlendirebiliriz. Nesneden Ã§ok deÄŸerler Ã¶n planda olduÄŸu iÃ§in. 

ğŸ‘‰ ! Recordlar, classlara istinaden objectten farklÄ± olarak iÃ§erisinde bulunan datalarÄ± sabitleyerek, nesneden ziyade verileri/datalarÄ± Ã¶n plana Ã§Ä±karÄ±r. 

ğŸ‘‰ ! Recordlar bir classtÄ±r. Sadece nesnelerinden ziyade deÄŸerleri Ã¶n plana Ã§Ä±kmÄ±ÅŸ classtÄ±r. foto6

ğŸ‘‹ 5 - Record TanÄ±mlama

Foto7- SaÄŸdaki gibi tanÄ±mlanan recordlara norminal record ednir. RecordÄ±n sÄ±nÄ±f olabilmesi iÃ§in propertylerin hepsinin init ile iÅŸaretlenmesi gerekecektir. 

  âœ¨ Record Ä°le Class ArasÄ±ndaki Fark KritiÄŸi YapalÄ±m âœ¨

Record yapÄ±lanmalarÄ±nda istersen deÄŸer deÄŸiÅŸtirebiliyorsun ama record oluÅŸturulma amacÄ± deÄŸiÅŸtirilemez nesneler oluÅŸturmaktÄ±r. Recordlar, deÄŸiÅŸtirilemez objeler oluÅŸturmamÄ±zÄ± saÄŸlar. Peki bu deÄŸiÅŸtirelemez objeleri classlar ile gerÃ§ekleÅŸtiremez miyiz? Bunu normal classlar ile de yapabiliyoruz ama record bu nedenle gelmedi zaten, daha anlamlÄ± daha profesyonel Ã§alÄ±ÅŸmalar yapabilelim diye geldi. 

Foto8 - Classta sadece init kullanabilirm. Ama sen nesneden Ã§ok deÄŸeri Ã¶n planda tutmak istersen record kullanabilirsin. foto8 de alt kÄ±sÄ±mdaki kod iÃ§in, bu nesnenin sÃ¼reÃ§te herhangi bir property deÄŸerini deÄŸiÅŸtirmek istediÄŸimizde bunu gerÃ§ekleÅŸtirebilmek iÃ§in yeni bir employee nesnesi Ã¼retmemiz ve deÄŸiÅŸkenliÄŸin yapÄ±lacaÄŸÄ± property dÄ±ÅŸÄ±nda diÄŸer propertyleri bu nesneden eÅŸleÅŸtirmemiz gerekecek. 
Foto9 - Yeni bir employee sÄ±nÄ±fÄ± oluÅŸturduk. Name ve surname  bilgisiniemployee1 den aldÄ±k. Employee1 in positionu 2 olarak deÄŸiÅŸtirdik. Yani deÄŸiÅŸmeyecek olan nesnenin propertylerini ilgili nesneden eÅŸleyerek aldÄ±k. Bu ÅŸekilde kullanÄ±mÄ± az property olduÄŸunda yaparÄ±z ama Ã§ok fazla property olsaydÄ± bunu yapmak can sÄ±kÄ±cÄ± oalcaktÄ±. Ne kadar Ã§ok property o kadar zor maliyetli kod demektir. Elbette reflection veya serialization ile kopyalama mantÄ±klarÄ± uygulanabilir veya auto mapping kÃ¼tÃ¼phanesi kullanÄ±labilir. Ama bu tarz bir durumda classlar iÅŸini zorlaÅŸtÄ±racaktÄ±r. 
EÄŸer ki sabit datalarla Ã§alÄ±ÅŸtÄ±ÄŸÄ±n nesnelerde recordda Ã§alÄ±ÅŸÄ±yorsan, record ilgili datalarÄ± hem Ã¶n plana Ã§Ä±akrÄ±yor hem de bu ÅŸekilde nesneyi Ã§oÄŸaltma durumlarÄ±nda yeni expressionlar getirmektedir. 

 âœ¨ With Expression âœ¨

Elindeki herhangi bir nesneyi hÄ±zlÄ± bir ÅŸekilde klonlayabilmek ve yeni bir nesne oluÅŸturmak istiyorsan bunu classlarda yapmak senin iÃ§in zahmetli olacaktÄ±r. Ama recordlarda Ã§alÄ±ÅŸÄ±yorsan with expression kullanabilrisin. 

Ä°mmutable(deÄŸiÅŸtirelemez,sabit) tÃ¼rlerde Ã§alÄ±ÅŸÄ±rken nesne Ã¼zerinde deÄŸiÅŸiklik yapabilmek iÃ§in ilgili nesneyi Ã§oÄŸaltÄ±p/klonlayÄ±p(deep copy)  Ã¼zerinde deÄŸiÅŸiklik yapman gerekmekte yada manuel yeni bir nesne Ã¼retip mevcut nesnede deÄŸerleri, deÄŸiÅŸikliÄŸi yansÄ±tacak ÅŸekilde aktarmamÄ±z gerekmektedir. Bu tarz durumlarda with function ile Ã§Ã¶zÃ¼m eskilerde kullanÄ±lmÄ±ÅŸtÄ±r. Foto9 . Ama bu tarz senaryolarda record kullanÄ±yorsan elindeki recordu direkt kopyalamanÄ± saÄŸlayacak syntax olan with ifadesi gelmiÅŸtir. Foto10, deÄŸiÅŸtirilecek property {} iÃ§inde belirtilmiÅŸtir. 




